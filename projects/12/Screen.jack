// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE; 
    static int SCREEN_TAIL;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN_BASE = 16384;
        let SCREEN_TAIL = 24576;
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;

        do Screen.setColor(false);
        let address = 0;
        while(~((SCREEN_BASE + address) > SCREEN_TAIL)) {
            let SCREEN_BASE[address] = color;
            let address = address + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; 

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, index, bitMask;

        let address = (y * 32) + (x / 16);
        let index = Math.mod(x, 16);
        let bitMask = Math.twoToThe(index);

        if(color) {
            let SCREEN_BASE[address] = SCREEN_BASE[address] | bitMask;
        } else {
            let SCREEN_BASE[address] = SCREEN_BASE[address] & ~bitMask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, absoluteDistanceX, absoluteDistanceY, diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        if((dx = 0) & (dy = 0)) {
            return;
        }

        if(dx = 0) {
            if(dy > 0) {
                do Screen.drawVerticalLine(y1, y2, x1);
            } else {
                do Screen.drawVerticalLine(y2, y1, x1);
            }
            return;
        }

        if(dy = 0) {
            if(dx > 0) {                
                do Screen.drawHorizontalLine(x1, x2, y1);
            } else {
                do Screen.drawHorizontalLine(x2, x1, y1);
            }   
            return;
        }

        if(dx > 0) {
            let absoluteDistanceY = Math.abs(dy);
            while(~(a > dx) & ~(b > absoluteDistanceY)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                } else {    
                    do Screen.drawPixel(x1 + a, y1 - b);
                }
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + absoluteDistanceY;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return; 
        } else {
            let absoluteDistanceX = Math.abs(dx);
            let absoluteDistanceY = Math.abs(dy);
            while(~(a > absoluteDistanceX) & ~(b > absoluteDistanceY)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    do Screen.drawPixel(x1 - a, y1 - b);
                }   
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + absoluteDistanceY;
                } else {
                    let b = b + 1;
                    let diff = diff - absoluteDistanceX;
                }
            }
            return;
        }
    }

    /** Draws a vertical line from pixel (x,y1) to pixel (x,y2), using the current color. */
    function void drawVerticalLine(int y1, int y2, int x) {
        var int start, end, diff, index, bitMask, i;

        let start = (y1 * 32) + (x / 16);
        let end = (y2 * 32) + (x / 16);
        let diff = end - start;
        let index = Math.mod(x, 16);
        let bitMask = Math.twoToThe(index);
        let i = 0;
        while(i < diff) {
            if(color) {
                let SCREEN_BASE[start + i] = SCREEN_BASE[start + i] | bitMask;
            } else {
                let SCREEN_BASE[start + i] = SCREEN_BASE[start + i] & ~bitMask;
            }
            let i = i + 32;
        }        

        return;
    }

    /** Draws a horizontal line from pixel (x1,y) to pixel (x2,y), using the current color. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int start, start_index, end, end_index, diff, i;
        var Array START_MASK, END_MASK;

        let START_MASK = Array.new(16);
        let START_MASK[0] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1;     // 1111111111111111
        let START_MASK[1] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16 + 8 + 4 + 2;         // 1111111111111110
        let START_MASK[2] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16 + 8 + 4;             // 1111111111111100
        let START_MASK[3] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16 + 8;                 // 1111111111111000
        let START_MASK[4] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16;                     // 1111111111110000
        let START_MASK[5] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32;                          // 1111111111100000
        let START_MASK[6] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64;                               // 1111111111000000
        let START_MASK[7] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128;                                    // 1111111110000000
        let START_MASK[8] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256;                                          // 1111111100000000
        let START_MASK[9] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024 + 512;                                                // 1111111000000000
        let START_MASK[10] = 32767 + 1 + 16384 + 8192 + 4096 + 2048 + 1024;                                                     // 1111110000000000
        let START_MASK[11] = 32767 + 1 + 16384 + 8192 + 4096 + 2048;                                                            // 1111100000000000
        let START_MASK[12] = 32767 + 1 + 16384 + 8192 + 4096;                                                                   // 1111000000000000
        let START_MASK[13] = 32767 + 1 + 16384 + 8192;                                                                          // 1110000000000000
        let START_MASK[14] = 32767 + 1 + 16384;                                                                                 // 1100000000000000
        let START_MASK[15] = 32767 + 1;                                                                                         // 1000000000000000

        let END_MASK = Array.new(16);        
        let END_MASK[0] = 1;                    // 0000000000000001
        let END_MASK[1] = 3;                    // 0000000000000011
        let END_MASK[2] = 7;                    // 0000000000000111
        let END_MASK[3] = 15;                   // 0000000000001111
        let END_MASK[4] = 31;                   // 0000000000011111
        let END_MASK[5] = 63;                   // 0000000000111111
        let END_MASK[6] = 127;                  // 0000000001111111
        let END_MASK[7] = 255;                  // 0000000011111111
        let END_MASK[8] = 511;                  // 0000000111111111
        let END_MASK[9] = 1023;                 // 0000001111111111
        let END_MASK[10] = 2047;                // 0000011111111111
        let END_MASK[11] = 4095;                // 0000111111111111
        let END_MASK[12] = 8191;                // 0001111111111111
        let END_MASK[13] = 16383;               // 0011111111111111
        let END_MASK[14] = 32767;               // 0111111111111111
        let END_MASK[15] = 32767 + 32767 + 1;   // 1111111111111111

        let start = (y * 32) + (x1 / 16);
        let start_index = Math.mod(x1, 16);
        let end = (y * 32) + (x2 / 16);
        let end_index = Math.mod(x2, 16);
        let diff = end - start;
        
        if(diff = 0) {
            let i = x1;
            while(~(i > x2)) {
                do Screen.drawPixel(i, y);
                let i = i + 1;
            }          
        } else {
            if(color) {
                let SCREEN_BASE[start] = SCREEN_BASE[start] | START_MASK[start_index];
                if(diff > 1) {
                    let i = 1;
                    while(i < diff) {
                        let SCREEN_BASE[start + i] = SCREEN_BASE[start + i] | ~0;
                        let i = i + 1;
                    }
                }
                let SCREEN_BASE[end] = SCREEN_BASE[end] | END_MASK[end_index];
            } else {
                let SCREEN_BASE[start] = SCREEN_BASE[start] & ~START_MASK[start_index];
                if(diff > 1) {
                    let i = 1;
                    while(i < diff) {
                        let SCREEN_BASE[start + i] = SCREEN_BASE[start + i] & 0;
                        let i = i + 1;
                    }
                }
                let SCREEN_BASE[end] = SCREEN_BASE[end] & ~END_MASK[end_index];
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, dy;

        let y = 0;
        let dy = y2 - y1;

        while(~(y > dy)) {
            do Screen.drawLine(x1, y1 + y, x2, y1 + y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, value;

        if(~(r > 181)) {
            let dy = -r;
            while(~(dy > r)) {
                let value = Math.sqrt((r * r) - (dy * dy));
                do Screen.drawLine((x - value), (y + dy), (x + value), (y + dy));
                let dy = dy + 1;                
            }
        }

        return;
    }
}
