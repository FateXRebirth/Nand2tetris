// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE; 
    static int SCREEN_TAIL;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN_BASE = 16384;
        let SCREEN_TAIL = 24576;
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; 

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, index, twoToTheValue;

        let address = (y * 32) + (x / 16) + SCREEN_BASE;
        let value = Memory.peek(address);
        let index = Math.mod(x, 16);
        let twoToTheValue = Math.twoToThe(index);

        if(color) {
            let value = value | twoToTheValue;
        } else {
            let value = value & ~twoToTheValue;
        }
        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, absoluteDistanceX, absoluteDistanceY, diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        if(dx = 0) {
            while(~(b > Math.abs(dy))) {
                if(dy > 0) {
                    do Screen.drawPixel(x1, y1 + b);
                } else {
                    do Screen.drawPixel(x1, y1 - b);
                }
                let b = b + 1;
            }
            return;
        }

        if(dy = 0) {
            while(~(a > Math.abs(dx))) {
                if(dx > 0) {
                    do Screen.drawPixel(x1 + a, y1);
                } else {
                    do Screen.drawPixel(x1 - a, y1);
                }
                let a = a + 1;
            }
            return;
        }

        if(dx > 0) {
            let absoluteDistanceY = Math.abs(dy);
            while(~(a > dx) & ~(b > absoluteDistanceY)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                } else {    
                    do Screen.drawPixel(x1 + a, y1 - b);
                }
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + absoluteDistanceY;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return; 
        } else {
            let absoluteDistanceX = Math.abs(dx);
            let absoluteDistanceY = Math.abs(dy);
            while(~(a > absoluteDistanceX) & ~(b > absoluteDistanceY)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    do Screen.drawPixel(x1 - a, y1 - b);
                }   
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + absoluteDistanceY;
                } else {
                    let b = b + 1;
                    let diff = diff - absoluteDistanceX;
                }
            }
            return;
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
