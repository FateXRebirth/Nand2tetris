function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_0_START
push argument 0
neg
return
goto IF_0_END
label IF_0_START
push argument 0
return
label IF_0_END
function Math.multiply 4
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
eq
pop local 3
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push constant 0
pop local 0
push constant 0
pop local 1
push argument 0
pop local 2
label WHILE_1_START
push local 0
push constant 16
lt
not
if-goto WHILE_1_END
push argument 1
push local 0
call Math.bit 2
not
if-goto IF_2_START
push local 1
push local 2
add
pop local 1
goto IF_2_END
label IF_2_START
label IF_2_END
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_1_START
label WHILE_1_END
push local 3
not
if-goto IF_3_START
push local 1
return
goto IF_3_END
label IF_3_START
push local 1
neg
return
label IF_3_END
function Math.divide 3
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
eq
pop local 2
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
not
if-goto IF_4_START
push constant 0
return
goto IF_4_END
label IF_4_START
label IF_4_END
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto IF_5_START
push local 0
push local 0
add
pop local 1
goto IF_5_END
label IF_5_START
push local 0
push local 0
add
push constant 1
add
pop local 1
label IF_5_END
push local 2
not
if-goto IF_6_START
push local 1
return
goto IF_6_END
label IF_6_START
push local 1
neg
return
label IF_6_END
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_7_START
push local 1
push constant 0
lt
not
not
if-goto WHILE_7_END
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto IF_8_START
push local 2
pop local 0
goto IF_8_END
label IF_8_START
label IF_8_END
push local 1
push constant 1
sub
pop local 1
goto WHILE_7_START
label WHILE_7_END
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto IF_9_START
push argument 0
return
goto IF_9_END
label IF_9_START
push argument 1
return
label IF_9_END
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto IF_10_START
push argument 0
return
goto IF_10_END
label IF_10_START
push argument 1
return
label IF_10_END
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
gt
return
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.twoToThe 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
