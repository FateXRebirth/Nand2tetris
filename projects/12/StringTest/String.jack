// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int index;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
           let maxLength = 1;   
        }

        let str = Array.new(maxLength);
        let index = 0;
        let length = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < length) {
            let str[j] = c;
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(index < length) {
            let str[index] = c;
            let index = index + 1;
        }
        
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(index > 0) {
            let str[index] = 0;
            let index = index - 1;
        }
        
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        if(index > 0 & str[0] = 45) {
            return -string2Int(str);
        } else {
            return string2Int(str);
        }
        
    }

    method int string2Int(string str) {
        var int val, i, d;
        var char c;

        let val = 0;
        let i = 0;
        while(i < length()) {
            let c = charAt(i);
            if(String.isNumber(c)) {
                let d = String.toVal(c);
                let val = (val * 10) + d;
            }
            let i = i + 1;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let index = 0;
        
        if(val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do int2String(val);

        return;
    }

    method String int2String(int val) {
        var int nextVal;
        var char c;

        let nextVal = val / 10;
        let c = String.toChar(val - (nextVal * 10));
        if(val < 10) {
            do appendChar(c);
        } else {
            do int2String(nextVal);
            do appendChar(c);
        }

        return this;
    }

    /** Returns the val of char */
    function boolean isNumber(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Returns the val of char */
    function int toVal(char c) {
        return c - 48;
    }

    /** Returns the char of val */
    function char toChar(int val) {
        return val + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
