// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array RAM;
    static int HEAP_BASE; 
    static int HEAP_TAIL;
    static int NEXT;
    static int SIZE;
    static int SEGMENT_HEADER_SIZE;

    static int freeList;
    static int lastSegment;

    /** Initializes the class. */
    function void init() {
        var Array block;

        let RAM = 0;
        let HEAP_BASE = 2048;
        let HEAP_TAIL = 16384;
        let NEXT = 0;
        let SIZE = 1;
        let SEGMENT_HEADER_SIZE = 2;

        let block = HEAP_BASE;
        let block[NEXT] = null;
        let block[SIZE] = HEAP_TAIL - HEAP_BASE - SEGMENT_HEADER_SIZE;
        let freeList = block;
        let lastSegment = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** first-fit algorithm */
    function Array firstFit(int size) {
        var array block;
        var boolean loop;

        let block = freeList;        
        let loop = true;

        while(loop) {
            if(~(block[SIZE] < size)) {
                return block;
            }
            let lastSegment = block;
            let block = block[NEXT];
            if(block = null) {
                return null;
            }
        }
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array foundBlock, block;

        let foundBlock = Memory.firstFit(size);

        if(foundBlock = null) {
            return 0;
        }

        if(foundBlock[SIZE] = size) {
            if(~(lastSegment = null)) {
                let lastSegment[NEXT] = foundBlock[NEXT];  
            }
        } else { 
            let block = foundBlock + (size + SEGMENT_HEADER_SIZE);
            let block[SIZE] = foundBlock[SIZE] - (size + SEGMENT_HEADER_SIZE);
            if(~(lastSegment = null)) {
               let block[NEXT] = foundBlock[NEXT];
            }  else {
               let block[NEXT] = null;
               let freeList = block;
            }
        }

        let foundBlock[NEXT] = null;
        let foundBlock[SIZE] = size;
        return foundBlock + SEGMENT_HEADER_SIZE;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }
}
